{"version":3,"sources":["lib/winner.js","lib/pre_computed/getNextStep.js","lib/minimax/bestMove.js","components/Square.jsx","components/Board.jsx","components/PlayerInfo.jsx","components/Switch.jsx","components/BotInfo.jsx","components/Game.jsx","index.js"],"names":["winningPositionCombos","getWinnerInBoard","squares","winner","winningPositions","i","j","k","blockOpponent","opponent","board","undefined","currBoardStateKeyToNextChances","rotateBoardClockwise","newLocation","temp2","temp1","Math","ceil","laterallyInvertBoard","temp","getAntiClockwiseRotatedSquarePos","squarePos","floor","getCurrBoardKey","player","currBoardKey","length","getNextMove","next_move","chances","rotatedBoard","laterallyInvertedBoard","chance","random","getLaterallyInvertedSquarePos","getCalculatedNextMove","getNextMoveInSequence","BestMove","this","xCount","oCount","legalMoves","push","place","updatedBoard","includes","terminal","utility","maxValue","actions","action","minValue","getMinValue","result","getMaxValue","maxValuePositions","actionsAvailable","Square","props","className","isWinningPosition","onClick","value","Board","playAtPos","key","squareComponents","renderSquare","boardRowComponents","renderBoardRow","React","Component","PlayerInfo","isBotsChance","symbol","stats","losses","wins","draws","IOSSwitch","withStyles","theme","root","width","height","padding","margin","spacing","switchBase","transform","color","palette","common","white","backgroundColor","opacity","border","thumb","track","borderRadius","transition","transitions","create","checked","focusVisible","classes","Switch","focusVisibleClassName","disableRipple","BotInfo","botPlayer","title","onChange","toggleEnableAI","aria-hidden","style","timeTakenByBot","draw","playBotsChance","Game","handleKeyDown","event","state","code","undoLastMove","resetGame","willOpponentStart","setState","Array","moves","toggleIsBotsChance","enableAI","target","checkForWinner","getWinningPositionCombosInBoard","Set","has","splice","nextStep","startTime","Date","getTime","getNextStep","getNextPreComputedStep","endTime","document","addEventListener","removeEventListener","rel","href","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3c61aad9.chunk.js","sourcesContent":["const winningPositionCombos = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n];\n\nexport function getWinnerInBoard(squares) {\n    let winner;\n    for (let winningPositions of winningPositionCombos) {\n        const [i, j, k] = winningPositions;\n        if (squares[i] && squares[i] === squares[j] && squares[i] === squares[k]) {\n            winner = squares[i];\n            break;\n        }\n    }\n    return winner;\n}\n\nexport function getWinningPositionCombosInBoard(squares) {\n    for (let winningPositions of winningPositionCombos) {\n        const [i, j, k] = winningPositions;\n        if (squares[i] && squares[i] === squares[j] && squares[i] === squares[k]) {\n            return winningPositions;\n        }\n    }\n}","function blockOpponent(opponent, board) {\n    if (board[0] === opponent) {\n        if (board[1] === opponent && board[2] === undefined) return 2;\n        if (board[2] === opponent && board[1] === undefined) return 1;\n        if (board[4] === opponent && board[8] === undefined) return 8;\n        if (board[8] === opponent && board[4] === undefined) return 4;\n        if (board[3] === opponent && board[6] === undefined) return 6;\n        if (board[6] === opponent && board[3] === undefined) return 3;\n    }\n    if (board[1] === opponent) {\n        if (board[2] === opponent && board[0] === undefined) return 0;\n        if (board[4] === opponent && board[7] === undefined) return 7;\n        if (board[7] === opponent && board[4] === undefined) return 4;\n    }\n    if (board[2] === opponent) {\n        if (board[4] === opponent && board[6] === undefined) return 6;\n        if (board[6] === opponent && board[4] === undefined) return 4;\n        if (board[5] === opponent && board[8] === undefined) return 8;\n        if (board[8] === opponent && board[5] === undefined) return 5;\n    }\n    if (board[3] === opponent) {\n        if (board[6] === opponent && board[0] === undefined) return 0;\n        if (board[4] === opponent && board[5] === undefined) return 5;\n        if (board[5] === opponent && board[4] === undefined) return 4;\n    }\n    if (board[4] === opponent) {\n        if (board[8] === opponent && board[0] === undefined) return 0;\n        if (board[7] === opponent && board[1] === undefined) return 1;\n        if (board[6] === opponent && board[2] === undefined) return 2;\n        if (board[5] === opponent && board[3] === undefined) return 3;\n    }\n    if (board[5] === opponent) {\n        if (board[8] === opponent && board[2] === undefined) return 2;\n    }\n    if (board[6] === opponent) {\n        if (board[7] === opponent && board[8] === undefined) return 8;\n        if (board[8] === opponent && board[7] === undefined) return 7;\n    }\n    if (board[7] === opponent) {\n        if (board[8] === opponent && board[6] === undefined) return 6;\n    }\n}\n\nconst currBoardStateKeyToNextChances = {\n// Computer started\n    // Empty board, play any\n    '000000000': [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    // Corner first -> Adjacent mid\n    '120000000': [6],\n    // Corner first -> Adjacent mid -> after blocker\n    '120200100': [4, 8],\n    // Corner first -> Non opposite corner\n    '102000000': [8],\n    // Corner first -> non adjacent mid\n    '100002000': [6],\n    // Corner first -> opposite corner\n    '100000002': [2, 6],\n    // Corner first -> opposite corner -> after blocker\n    '100200102': [2],\n    // Corner first -> center\n    '100020000': [8, 7, 5],\n    // Corner first -> center -> opp mid -> adjacent mid\n    '120020010': [6],\n    // Corner first -> center -> opp mid -> opp corner\n    '100020012': [2, 3, 5, 6],\n    // Mid first -> adjacent corner\n    '210000000': [3, 6, 8],\n    // Mid first -> adjacent corner -> corner below\n    '212000100': [7],\n    '210200100': [4, 7, 8],\n            // after 8 & filler in above\n            '210200121': [2],\n    '210002100': [5, 7],\n    '210000102': [5],\n    // Mid first -> adjacent corner -> opp corner\n    '210002001': [7],\n    '210000021': [6],\n    // Mid first -> adjacent corner -> opp corner -> between corner + fillers\n    '210100221': [2],\n    // Mid first -> adjacent corner -> adjacent mid -> non-center\n        // top and left mid\n    '212100000': [4],\n    '210102000': [4],\n    '210100002': [4],\n    // Mid first -> Adjacent Mid\n    '010200000': [4],\n    // Mid first -> Adjacent mid -> after blocker\n    '010210020': [0, 2],\n    // Mid first -> opp corner\n    '010000200': [0],\n    // Mid first -> opp mid\n    '010000020': [4, 6, 8],\n    // Mid first -> opp mid -> center\n    '210010020': [3, 5, 6, 7],\n    // Mid first -> opp mid -> opp corner\n        // bottom corners\n    '010200120': [2],\n    '010002120': [0, 2],\n    '010000122': [0, 2],\n    // Mid first -> center\n    '010020000': [6, 8],\n    // Mid first -> center -> filled (same as Corner first -> center -> non opp corner -> adjacent mid)\n    // Center first -> corner\n    '200010000': [8],\n    // Center first -> corner -> opp corner -> adjacent mid\n    '200012001': [2, 5],\n    // Center first -> mid\n    '020010000': [0, 2, 3, 5],\n    // Center first -> mid -> blocker (Already covered above in multi)\n// Opponent started\n    // Corner start\n    '200000000': [4],\n    // Corner start -> opp corner\n    '200010002': [1,3,5,7],\n    // Corner start -> opp mid\n    '200010020': [6, 8],\n    // Mid start\n    '020000000': [0, 4, 6, 7],\n    // Mid start -> opp corner -> adjacent mid\n    '020002100': [0, 8],\n    '020200100': [8],\n    // Mid start -> opp corner -> opp corner\n    '020000102': [0],\n    // Mid start -> opp corner -> opp corner -> blocker\n    '120200102': [4, 5],\n    // Mid start -> center -> adjacent mid\n    '020210000': [0, 2, 6],\n    // Mid start -> center -> opp corner\n    '020010200': [2],\n    // Mid start -> center -> opp mid\n    '020010020': [3, 5],\n    // Mid start -> center -> opp mid -> blocker\n    '020211020': [2, 8],\n    // Mid start -> adjacent corner -> adjacent mid below corner\n    '120200000': [5, 8],\n    // Mid start -> adjacent corner -> adjacent mid below corner -> opp corner to prev step\n    '122200010': [8],\n    // Mid start -> adjacent corner -> opp corner below prev corner\n    '120000200': [4, 7],\n    // Mid start -> adjacent corner -> adjacent corner\n    '122000000': [6],\n    // Mid start -> adjacent corner -> adjacent corner -> after blocker\n    '122200100': [8],\n    // Mid start -> adjacent corner -> adjacent mid opp to prev corner\n    '120002000': [3, 6],\n    // Mid start -> adjacent corner -> adjacent mid opp to prev corner -> adjacent mid -> after blocker\n    '120102200': [4],\n    // Mid start -> adjacent corner -> opp corner opp prev corner\n    '120000002': [4],\n    // Center start\n    '000020000': [0, 2, 6, 8],\n    // Center start -> opp corner\n    '100020002': [6, 2]\n};\n\nfunction getCalculatedNextMove(player, board) {\n    let i = 0, j = 0;\n    let currBoardKey = getCurrBoardKey(player, board), chances = [], rotatedBoard = [...board];\n    while (i < 4) {\n        let laterallyInvertedBoard = [...rotatedBoard];\n        j = 0;\n        while (j < 2) {\n            if (currBoardStateKeyToNextChances[currBoardKey]) {\n                chances = currBoardStateKeyToNextChances[currBoardKey];\n                break;\n            }\n            if (j !== 1) {\n                laterallyInvertBoard(laterallyInvertedBoard);\n                currBoardKey = getCurrBoardKey(player, laterallyInvertedBoard);\n            }\n            j++;\n        }\n        if (chances.length > 0) break;\n        if (i !== 3) {\n            rotateBoardClockwise(rotatedBoard);\n            currBoardKey = getCurrBoardKey(player, rotatedBoard);\n        }\n        i++;\n    }\n    if (chances.length === 0) return;\n    let chance = chances[Math.floor(Math.random() * chances.length)];\n    if (j > 0) chance = getLaterallyInvertedSquarePos(chance);\n    while (i > 0) {\n        chance = getAntiClockwiseRotatedSquarePos(chance);\n        i--;\n    }\n    return chance;\n}\n\nfunction rotateBoardClockwise(board) {\n    let i, j = 0, newLocation, temp1 = 0, temp2;\n    while (j < 2) {\n        i = 0;\n        temp2 = board[temp1];\n        while (i < 4) {\n            newLocation = (((temp1 + 1) * 3) - Math.ceil((temp1 + 1)/3)) % 9;\n            temp1 = board[newLocation];\n            board[newLocation] = temp2;\n            temp2 = temp1;\n            temp1 = newLocation;\n            i++;\n        }\n        temp1++;\n        j++;\n    }\n}\n\nfunction laterallyInvertBoard(board) {\n    let i = 0, temp;\n    while (i < 9) {\n        temp = board[i];\n        board[i] = board[i+2];\n        board[i+2] = temp;\n        i+=3;\n    }\n}\n\nfunction getAntiClockwiseRotatedSquarePos(squarePos) {\n    if (squarePos === 4) return squarePos;\n    return (2 - (squarePos % 3)) * 3 + Math.floor(squarePos/3);\n}\n\nfunction getLaterallyInvertedSquarePos(squarePos) {\n    switch(squarePos) {\n        case 0: return 2;\n        case 2: return 0;\n        case 3: return 5;\n        case 5: return 3;\n        case 6: return 8;\n        case 8: return 6;\n        default: return squarePos;\n    }\n}\n\nfunction getCurrBoardKey(player, board) {\n    let currBoardKey = '';\n    for (let i = 0; i < board.length; i++)\n        currBoardKey += board[i] === undefined ? '0' : board[i] === player ? '1' : '2'\n    return currBoardKey;\n}\n\n\nfunction getNextMoveInSequence(board) {\n    for (let i = 0; i < board.length; i++) {\n        if (board[i] === undefined) return i;\n    }\n}\n\nexport default function getNextMove(player, board) {\n    const opponent = player === 'X' ? 'O' : 'X';\n    let next_move = blockOpponent(player, board);  // Get player's win condition\n    if (next_move !== undefined) return next_move;\n    next_move = blockOpponent(opponent, board);\n    if (next_move !== undefined) return next_move;\n    next_move = getCalculatedNextMove(player, board)\n    if (next_move !== undefined) return next_move;\n    return getNextMoveInSequence(board);\n}","import {getWinnerInBoard} from '../winner.js';\n\nexport default class BestMove {\n    constructor(player) {\n        this.player = player;\n        this.opponent = player === 'X' ? 'O' : 'X';\n    }\n\n    // Returns player to move in current state of the board\n    playerChance(board) {\n        let xCount = 0, oCount = 0;\n        for (let i = 0; i < board.length; i++) {\n            if (board[i] === 'X') xCount++;\n            else if (board[i] === 'O') oCount++;\n        }\n        return xCount > oCount ? 'O' : 'X';\n    }\n\n    // returns legal moves in current state of the board\n    actions(board) {\n        let legalMoves = [];\n        for (let i = 0; i < board.length; i++) {\n            if (board[i] === undefined) legalMoves.push(i);\n        }\n        return legalMoves;\n    }\n\n    // returns state of the board when chance is played on place\n    result(board, place, player) {\n        const updatedBoard = [...board];\n        updatedBoard[place] = player;\n        return updatedBoard;\n    }\n\n    // returns true if current state of board has a winner\n    terminal(board) {\n        return getWinnerInBoard(board) !== undefined || !board.includes(undefined);\n    }\n\n    /**\n     * Returns:\n     *      1   -> if player wins\n     *      0   -> if game is draw\n     *      -1  -> if opponent wins\n     */\n    utility(board) {\n        const winner = getWinnerInBoard(board);\n        return winner === undefined ? 0 : winner === this.player ? 1 : -1;\n    }\n\n    getMaxValue(board) {\n        if (this.terminal(board)) {\n            return this.utility(board);\n        }\n        let maxValue = -2;\n            for (let action of this.actions(board)) {\n                const minValue = this.getMinValue(this.result(board, action, this.player));\n                if (minValue !== 2 && minValue > maxValue) {\n                    maxValue = minValue;\n                }\n                if (maxValue === 1) break;  // Alpha pruning\n            }\n        return maxValue;\n    }\n\n    getMinValue(board) {\n        if (this.terminal(board)){\n            return this.utility(board);\n        }\n        let minValue = 2;\n            for (let action of this.actions(board)) {\n                const maxValue = this.getMaxValue(this.result(board, action, this.opponent));\n                if (maxValue !== -2 && maxValue < minValue) {\n                    minValue = maxValue;\n                }\n                if (minValue === -1) break; // Beta pruning\n            }\n        return minValue;\n    }\n\n    getNextStep(board) {\n        let maxValuePositions = [], maxValue = -2;\n        const actionsAvailable = this.actions(board);\n        for (let action of actionsAvailable) {\n            const minValue = this.getMinValue(this.result(board, action, this.player));\n            if (minValue !== 2 && minValue > maxValue) {\n                maxValuePositions = [action];\n                maxValue = minValue;\n            } else if (maxValue === minValue) {\n                maxValuePositions.push(action);\n            }\n        }\n        return maxValuePositions[Math.floor(Math.random() * maxValuePositions.length)];\n    }\n\n}","import React from 'react';\n\n// class Square extends React.Component {\n//     render() {\n//         return (\n//             <button className=\"square\"\n//                 onClick={this.props.onClick}>\n//                 {this.props.value}\n//             </button>\n//         );\n//     }\n// }\n\nexport default function Square(props) {\n    return (\n        <button\n            className={`square ${ props.isWinningPosition ? 'square-winner' : ''}`}\n            onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}","import React from 'react';\nimport Square from './Square.jsx';\n\nclass Board extends React.Component {\n\n    renderSquare(i) {\n        const { board = [], playAtPos, winningPositions } = this.props;\n        return (\n            <Square\n                key={'square-'+i}\n                value={board[i]}\n                isWinningPosition={winningPositions.includes(i)}\n                onClick={() => playAtPos(i)}/>\n        );\n    }\n\n    renderBoardRow(i) {\n        const squareComponents = [];\n        for (let j = 0; j < 3; j++) {\n            squareComponents.push(this.renderSquare(i*3+j));\n        }\n        return (<div key={'board-'+i}className=\"board-row\">{squareComponents}</div>);\n    }\n\n    render() {\n        const boardRowComponents = [];\n        for (let i = 0; i < 3; i++) {\n            boardRowComponents.push(this.renderBoardRow(i));\n        }\n        return (\n            <div className=\"inline-block\">\n                <div className=\"fit-content\">\n                    {boardRowComponents}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React from 'react';\n\nexport default function PlayerInfo(props) {\n    return (\n        <div>\n            <div className={props.isBotsChance ? 'red' : 'green'}>\n                <b>Player</b><br/>\n                <div className=\"player-symbol\">{props.symbol}</div>\n            </div>\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <td className=\"pdlr-15\">Wins</td>\n                        <td className=\"pdlr-15\">Losses</td>\n                        <td className=\"pdlr-15\">Draws</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>{props.stats.losses}</td>\n                        <td>{props.stats.wins}</td>\n                        <td>{props.stats.draws}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n}","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Switch from '@material-ui/core/Switch';\n\nconst IOSSwitch = withStyles((theme) => ({\n    root: {\n      width: 60,\n      height: 40,\n      padding: 2,\n      margin: theme.spacing(2),\n    },\n    switchBase: {\n      padding: 3,\n      '&$checked': {\n        transform: 'translateX(20px)',\n        color: theme.palette.common.white,\n        '& + $track': {\n          backgroundColor: '#3be8e0de',\n          opacity: 1,\n          border: 'none',\n        },\n      },\n      '&$focusVisible $thumb': {\n        color: '#52d869',\n        border: '2px solid #fff',\n      },\n    },\n    thumb: {\n      width: 34,\n      height: 34,\n    },\n    track: {\n      borderRadius: 30,\n      backgroundColor: 'rgb(184, 184, 184)',\n      opacity: 1,\n      transition: theme.transitions.create(['background-color', 'border']),\n    },\n    checked: {},\n    focusVisible: {},\n  }))(({ classes, ...props }) => {\n    return (\n      <Switch\n        focusVisibleClassName={classes.focusVisible}\n        disableRipple\n        classes={{\n          root: classes.root,\n          switchBase: classes.switchBase,\n          thumb: classes.thumb,\n          track: classes.track,\n          checked: classes.checked,\n        }}\n        {...props}\n      />\n    );\n  });\n  \n  export default IOSSwitch;","import React from 'react';\nimport Switch from './Switch.jsx';\n\nexport default function BotInfo(props) {\n    return (\n        <div>\n            <div className={props.isBotsChance ? 'green' : 'red'}>\n                <b>Bot</b><br/>\n                <div className=\"player-symbol\">{props.botPlayer}</div>\n            </div>\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <td className=\"pdlr-15\">Wins</td>\n                        <td className=\"pdlr-15\">Losses</td>\n                        <td className=\"pdlr-15\">Draws</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>{props.stats.wins}</td>\n                        <td>{props.stats.losses}</td>\n                        <td>{props.stats.draws}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <div className=\"flex-row\">\n                <div className=\"flex-grow-1\">\n                    <span className=\"vertical-middle\">AI</span>\n                    <Switch\n                        title=\"Use minimax search algorithm\"\n                        onChange={props.toggleEnableAI}/>\n                </div>\n                <span className=\"flex-grow-1 left pdtb-20\">\n                    <i className=\"fa fa-clock-o\" aria-hidden=\"true\"></i>\n                    <span className=\"mgl-10 inline-block\" style={{width: '100px'}}>\n                        { props.timeTakenByBot !== undefined ? `${props.timeTakenByBot}` : ''} ms\n                    </span>\n                </span>\n            </div>\n            <button\n                title=\"Play bot's chance\"\n                className=\"icon-button magnify-4 mgt-50\">\n                    <i className={`fa fa-play fa-shadow icon ${!props.isBotsChance || props.winner || props.draw ? 'grey' : 'green'}`}\n                        onClick={props.playBotsChance} aria-hidden=\"true\"></i>\n                        <span className=\"note magnify-0-5 white\">Play bot</span>\n            </button>\n        </div>\n    );\n}","import React from 'react';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { getWinnerInBoard, getWinningPositionCombosInBoard } from '../lib/winner.js';\nimport getNextPreComputedStep from '../lib/pre_computed/getNextStep.js';\nimport BestMove from '../lib/minimax/bestMove.js';\nimport Board from './Board.jsx';\nimport PlayerInfo from './PlayerInfo.jsx';\nimport BotInfo from './BotInfo.jsx';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stats: {\n                wins: 0,\n                losses: 0,\n                draws: 0\n            },\n            enableAI: false,\n            winningPositions: []\n        };\n    }\n\n    componentDidMount() {\n        this.resetGame();\n        document.addEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    handleKeyDown = (event) => {\n        const { isBotsChance } = this.state;\n        switch (event.code) {\n            case 'ArrowRight': isBotsChance && this.playBotsChance();\n                break;\n            case 'ArrowLeft': this.undoLastMove();\n                break;\n            case 'KeyR':\n            case 'KeyN': this.resetGame();\n                break;\n            default: break;\n        }\n    }\n\n    resetGame = () => {\n        const willOpponentStart = Math.random() >= 0.5;\n        this.setState({\n            board: new Array(9),\n            isBotsChance: !willOpponentStart,\n            timeTakenByBot: undefined,\n            opponent: willOpponentStart ? 'X' : 'O',\n            botPlayer: willOpponentStart ? 'O' : 'X',\n            moves: [],\n            winner: undefined,\n            draw: false,\n            winningPositions: []\n        });\n    }\n\n    toggleIsBotsChance = () => {\n        this.setState({\n            isBotsChance: !this.state.isBotsChance\n        });\n    }\n\n    toggleEnableAI = (event) => {\n        this.setState({\n            enableAI: event.target.checked,\n        });\n    }\n\n    checkForWinner = () => {\n        const { board, opponent, stats } = this.state;\n        const winner = getWinnerInBoard(board);\n        if (winner) {\n            const winningPositions = getWinningPositionCombosInBoard(board);\n            if (winner === opponent) stats.losses++;\n            else stats.wins++;\n            this.setState({\n                winner: winner === opponent ? 'Player' : 'Bot',\n                stats,\n                winningPositions,\n            });\n        } else if (!(new Set(board).has(undefined))) {\n            stats.draws++;\n            this.setState({\n                draw: true,\n                stats\n            });\n        }\n    }\n\n    undoLastMove = () => {\n        const { board, moves } = this.state;\n        if (moves.length === 0) return;\n        board[moves[moves.length-1]] = undefined;\n        moves.splice(moves.length-1);\n        this.setState({\n            board: [...board],\n            timeTakenByBot: undefined,\n            moves,\n            winner: undefined,\n            draw: false,\n            winningPositions: []\n        });\n        this.toggleIsBotsChance();\n    }\n\n    playBotsChance = () => {\n        const { board, enableAI, botPlayer, moves, isBotsChance } = this.state;\n        if (!isBotsChance) return;\n        const startTime = new Date().getTime();\n        let nextStep;\n        if (enableAI) nextStep = new BestMove(botPlayer).getNextStep(board);\n        else nextStep = getNextPreComputedStep(botPlayer, board);\n        const endTime = new Date().getTime();\n        board[nextStep] = botPlayer;\n        this.setState({board: [...board], timeTakenByBot: endTime - startTime});\n        moves.push(nextStep);\n        this.checkForWinner();\n        this.toggleIsBotsChance();\n    }\n    \n    playAtPos = (i) => {\n        const { board, isBotsChance, opponent, winner, draw, moves } = this.state;\n        if (!isBotsChance && !winner && !draw && !board[i]) {\n            board[i] = opponent;\n            this.setState({board, timeTakenByBot: undefined });\n            moves.push(i);\n            this.checkForWinner();\n            this.toggleIsBotsChance();\n        }\n    }\n\n    render() {\n        const { board, isBotsChance, opponent, botPlayer, winner, draw, timeTakenByBot, stats, winningPositions } = this.state;\n        return (\n            <div>\n                <div className=\"game\">\n                    <div className=\"flex-grow-1\">\n                        <PlayerInfo\n                            isBotsChance={isBotsChance}\n                            symbol={opponent}\n                            stats={stats}\n                        />\n                    </div>\n                    <div className=\"game-board container\">\n                        <div className=\"centered verdict text-wrapper\">\n                            { winner ? `${winner} Wins!`: draw ? 'Draw!' : '' }\n                        </div>\n                        <div className={winner || draw ? 'blurred' : ''}>\n                            <Board\n                                board={board}\n                                playAtPos={this.playAtPos}\n                                winningPositions={winningPositions}\n                                />\n                        </div>\n                    </div>\n                    <div className=\"flex-grow-1\">\n                        <BotInfo\n                            isBotsChance={isBotsChance}\n                            botPlayer={botPlayer}\n                            stats={stats}\n                            toggleEnableAI={this.toggleEnableAI}\n                            timeTakenByBot={timeTakenByBot}\n                            winner={winner}\n                            draw={draw}\n                            playBotsChance={this.playBotsChance}/>\n                    </div>\n                </div>\n                <div className=\"center pd-40 pdb-0\">\n                    <button\n                        title=\"Undo last chance\"\n                        className=\"icon-button magnify-4 mg-30 mgb-0\">\n                        <i className='fa fa-undo fa-shadow icon' aria-hidden=\"true\" \n                            onClick={this.undoLastMove}></i>\n                        <span className=\"note magnify-0-5 white\">Undo</span>\n                    </button>\n                    <button\n                        title=\"Restart game\"\n                        className=\"icon-button magnify-4 mg-30 mgb-0\">\n                        <i className='fa fa-refresh fa-shadow icon' aria-hidden=\"true\"\n                            onClick={this.resetGame}></i>\n                        <span className=\"note magnify-0-5 white\">Restart</span>\n                    </button>\n                </div>\n                <span className=\"shortcuts\">\n                    Shortcuts<br/>\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td className=\"pdlr-15 center\"><i className='fa fa-arrow-right' aria-hidden=\"true\"/></td>\n                                <td>Play bot's next chance</td>\n                            </tr>\n                            <tr>\n                                <td className=\"pdlr-15 center\"><i className='fa fa-arrow-left' aria-hidden=\"true\"/></td>\n                                <td>Undo previous step</td>\n                            </tr>\n                            <tr>\n                                <td className=\"pdlr-15 center\">R/N</td>\n                                <td>Reset Game / New Game</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </span>\n                <span className=\"note\"> Note: By default the bot uses pre-computed steps. When AI is enabled, bot uses minimax search algorithm.\n                    Note the difference in the speed of bot's decision in when AI is enabled or disabled, and when the board is empty or full.\n                    Refer <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/nimeshnischal/tic-tac-toe-ai-bot\">github repo</a> for more details.</span>\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game.jsx';\n\nReactDOM.render(\n    <Game/>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}